// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: iot.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemperatureService_RecordTemperature_FullMethodName  = "/iot.TemperatureService/RecordTemperature"
	TemperatureService_GetTemperature_FullMethodName     = "/iot.TemperatureService/GetTemperature"
	TemperatureService_GetAllTemperatures_FullMethodName = "/iot.TemperatureService/GetAllTemperatures"
)

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	RecordTemperature(ctx context.Context, in *RecordTemperatureRequest, opts ...grpc.CallOption) (*RecordTemperatureResponse, error)
	GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error)
	GetAllTemperatures(ctx context.Context, in *GetAllTemperaturesRequest, opts ...grpc.CallOption) (*GetAllTemperaturesResponse, error)
}

type temperatureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureServiceClient(cc grpc.ClientConnInterface) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) RecordTemperature(ctx context.Context, in *RecordTemperatureRequest, opts ...grpc.CallOption) (*RecordTemperatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordTemperatureResponse)
	err := c.cc.Invoke(ctx, TemperatureService_RecordTemperature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*GetTemperatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemperatureResponse)
	err := c.cc.Invoke(ctx, TemperatureService_GetTemperature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureServiceClient) GetAllTemperatures(ctx context.Context, in *GetAllTemperaturesRequest, opts ...grpc.CallOption) (*GetAllTemperaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllTemperaturesResponse)
	err := c.cc.Invoke(ctx, TemperatureService_GetAllTemperatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
// All implementations must embed UnimplementedTemperatureServiceServer
// for forward compatibility.
type TemperatureServiceServer interface {
	RecordTemperature(context.Context, *RecordTemperatureRequest) (*RecordTemperatureResponse, error)
	GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error)
	GetAllTemperatures(context.Context, *GetAllTemperaturesRequest) (*GetAllTemperaturesResponse, error)
	mustEmbedUnimplementedTemperatureServiceServer()
}

// UnimplementedTemperatureServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemperatureServiceServer struct{}

func (UnimplementedTemperatureServiceServer) RecordTemperature(context.Context, *RecordTemperatureRequest) (*RecordTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordTemperature not implemented")
}
func (UnimplementedTemperatureServiceServer) GetTemperature(context.Context, *GetTemperatureRequest) (*GetTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (UnimplementedTemperatureServiceServer) GetAllTemperatures(context.Context, *GetAllTemperaturesRequest) (*GetAllTemperaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTemperatures not implemented")
}
func (UnimplementedTemperatureServiceServer) mustEmbedUnimplementedTemperatureServiceServer() {}
func (UnimplementedTemperatureServiceServer) testEmbeddedByValue()                            {}

// UnsafeTemperatureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServiceServer will
// result in compilation errors.
type UnsafeTemperatureServiceServer interface {
	mustEmbedUnimplementedTemperatureServiceServer()
}

func RegisterTemperatureServiceServer(s grpc.ServiceRegistrar, srv TemperatureServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemperatureServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemperatureService_ServiceDesc, srv)
}

func _TemperatureService_RecordTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).RecordTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_RecordTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).RecordTemperature(ctx, req.(*RecordTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_GetTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetTemperature(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureService_GetAllTemperatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTemperaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServiceServer).GetAllTemperatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemperatureService_GetAllTemperatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServiceServer).GetAllTemperatures(ctx, req.(*GetAllTemperaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemperatureService_ServiceDesc is the grpc.ServiceDesc for TemperatureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemperatureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordTemperature",
			Handler:    _TemperatureService_RecordTemperature_Handler,
		},
		{
			MethodName: "GetTemperature",
			Handler:    _TemperatureService_GetTemperature_Handler,
		},
		{
			MethodName: "GetAllTemperatures",
			Handler:    _TemperatureService_GetAllTemperatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot.proto",
}
